import { Button } from "./ui/button";
import { Card } from "./ui/card";
import { Badge } from "./ui/badge";
import { Progress } from "./ui/progress";
import { CheckCircle, AlertCircle, XCircle, Download, TrendingUp } from "lucide-react";

interface ResultsPageProps {
  score: number;
  tier: number;
  tierName: string;
  responses: any[];
  onNavigate: (page: string) => void;
}

export function ResultsPage({ score, tier, tierName, responses, onNavigate }: ResultsPageProps) {
  const getComplianceLevel = () => {
    if (score >= 80) return { label: "Excellent", color: "bg-green-500", textColor: "text-green-700" };
    if (score >= 60) return { label: "Good", color: "bg-blue-500", textColor: "text-blue-700" };
    if (score >= 40) return { label: "Fair", color: "bg-yellow-500", textColor: "text-yellow-700" };
    return { label: "Needs Improvement", color: "bg-red-500", textColor: "text-red-700" };
  };

  const complianceLevel = getComplianceLevel();
  
  const yesCount = responses.filter(r => r.answer === "Yes").length;
  const noCount = responses.filter(r => r.answer === "No").length;
  const withEvidence = responses.filter(r => r.evidenceProvided).length;

  const handleDownloadReport = () => {
    const reportContent = `
CyberSecure Compliance Assessment Report
=========================================

Business Tier: ${tierName}
Assessment Date: ${new Date().toLocaleDateString()}
Compliance Score: ${score}%
Compliance Level: ${complianceLevel.label}

Summary:
- Total Questions: ${responses.length}
- Compliant (Yes): ${yesCount}
- Non-Compliant (No): ${noCount}
- Evidence Provided: ${withEvidence}

Detailed Responses:
${responses.map((r, i) => `
${i + 1}. ${r.question}
   Regulation: ${r.regulation}
   Answer: ${r.answer}
   Evidence: ${r.evidenceProvided ? 'Yes' : 'No'}
`).join('\n')}

Recommendations:
${score < 80 ? '- Review and address non-compliant areas\n- Implement missing security controls\n- Provide training to staff\n- Document all security policies' : '- Maintain current security practices\n- Regular reviews and updates\n- Stay informed about new regulations'}

Generated by CyberSecure - Botswana SME Compliance Tool
    `;

    const blob = new Blob([reportContent], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `CyberSecure_Assessment_Report_${new Date().toISOString().split('T')[0]}.txt`;
    a.click();
    URL.revokeObjectURL(url);
  };

  return (
    <div className="min-h-screen bg-gradient-to-b from-blue-50 to-white py-12 px-4">
      <div className="max-w-5xl mx-auto">
        {/* Header */}
        <div className="text-center mb-8">
          <Badge className="bg-primary text-white mb-4">{tierName}</Badge>
          <h1 className="text-primary mb-2">Assessment Results</h1>
          <p className="text-gray-600">
            Your cybersecurity compliance evaluation is complete
          </p>
        </div>

        {/* Score Card */}
        <Card className="p-8 mb-6 shadow-lg">
          <div className="text-center mb-6">
            <div className="inline-flex items-center justify-center w-32 h-32 rounded-full bg-gradient-to-br from-blue-500 to-blue-600 mb-4">
              <span className="text-5xl text-white">{score}%</span>
            </div>
            <h2 className={`${complianceLevel.textColor} mb-2`}>
              {complianceLevel.label}
            </h2>
            <p className="text-gray-600">Overall Compliance Score</p>
          </div>

          <Progress value={score} className={`h-4 mb-6 ${complianceLevel.color}`} />

          {/* Statistics */}
          <div className="grid md:grid-cols-3 gap-6">
            <div className="text-center p-4 bg-green-50 rounded-lg">
              <CheckCircle className="w-8 h-8 text-green-600 mx-auto mb-2" />
              <div className="text-2xl text-green-700">{yesCount}</div>
              <div className="text-gray-600">Compliant</div>
            </div>

            <div className="text-center p-4 bg-red-50 rounded-lg">
              <XCircle className="w-8 h-8 text-red-600 mx-auto mb-2" />
              <div className="text-2xl text-red-700">{noCount}</div>
              <div className="text-gray-600">Non-Compliant</div>
            </div>

            <div className="text-center p-4 bg-blue-50 rounded-lg">
              <AlertCircle className="w-8 h-8 text-blue-600 mx-auto mb-2" />
              <div className="text-2xl text-blue-700">{withEvidence}</div>
              <div className="text-gray-600">With Evidence</div>
            </div>
          </div>
        </Card>

        {/* Compliance Areas */}
        <div className="grid md:grid-cols-2 gap-6 mb-6">
          {/* Strong Areas */}
          <Card className="p-6">
            <div className="flex items-center gap-2 mb-4">
              <CheckCircle className="w-6 h-6 text-green-600" />
              <h3 className="text-gray-900">Strong Areas</h3>
            </div>
            <ul className="space-y-2">
              {responses
                .filter(r => r.answer === "Yes")
                .slice(0, 3)
                .map((r, i) => (
                  <li key={i} className="text-gray-600 flex items-start gap-2">
                    <span className="text-green-600 mt-1">✓</span>
                    <span>{r.question}</span>
                  </li>
                ))}
              {yesCount === 0 && (
                <li className="text-gray-500 italic">No compliant areas identified</li>
              )}
            </ul>
          </Card>

          {/* Areas for Improvement */}
          <Card className="p-6">
            <div className="flex items-center gap-2 mb-4">
              <AlertCircle className="w-6 h-6 text-orange-600" />
              <h3 className="text-gray-900">Areas for Improvement</h3>
            </div>
            <ul className="space-y-2">
              {responses
                .filter(r => r.answer === "No")
                .slice(0, 3)
                .map((r, i) => (
                  <li key={i} className="text-gray-600 flex items-start gap-2">
                    <span className="text-red-600 mt-1">✗</span>
                    <span>{r.question}</span>
                  </li>
                ))}
              {noCount === 0 && (
                <li className="text-gray-500 italic">All areas compliant</li>
              )}
            </ul>
          </Card>
        </div>

        {/* Regulation Breakdown */}
        <Card className="p-6 mb-6">
          <h3 className="text-gray-900 mb-4">Compliance by Regulation</h3>
          <div className="space-y-4">
            {Array.from(new Set(responses.map(r => r.regulation))).map(reg => {
              const regResponses = responses.filter(r => r.regulation === reg);
              const regScore = Math.round(
                (regResponses.filter(r => r.answer === "Yes").length / regResponses.length) * 100
              );
              return (
                <div key={reg}>
                  <div className="flex justify-between items-center mb-2">
                    <span className="text-gray-700">{reg}</span>
                    <span className="text-gray-600">{regScore}%</span>
                  </div>
                  <Progress value={regScore} className="h-2" />
                </div>
              );
            })}
          </div>
        </Card>

        {/* Action Buttons */}
        <div className="flex flex-wrap justify-center gap-4">
          <Button
            onClick={() => onNavigate('recommendations')}
            className="bg-primary hover:bg-blue-800 gap-2"
          >
            <TrendingUp className="w-4 h-4" />
            View Recommendations
          </Button>
          <Button
            onClick={handleDownloadReport}
            variant="outline"
            className="gap-2 border-primary text-primary hover:bg-blue-50"
          >
            <Download className="w-4 h-4" />
            Download Report
          </Button>
          <Button
            onClick={() => onNavigate('dashboard')}
            variant="outline"
          >
            Return to Dashboard
          </Button>
        </div>
      </div>
    </div>
  );
}
